[branch]
	# Automatically appends '--rebase' to 'git pull' commands; can be overridden with --no-rebase
	# If the origin has been force updated since you last pulled, this will silently rewrite your local history to match the origin
	# Do this before cloning the repository so branches inherit this setting as they are used
	# To retroactively apply it to an already pulled branch: git config branch.<branchname>.rebase true
	autoSetupRebase = always
[rebase]
	# Automatically create a temporary stash entry before the operation begins, and apply it after the operation ends. 
	# This means that you can run rebase on a dirty worktree without the message "error: cannot pull with rebase: You have unstaged changes" 
	autoStash = true

	# merge squash & fixup commits see https://robots.thoughtbot.com/autosquashing-git-commits
	autosquash = true
[core]
	# checkout as-is, commit as-is
	autocrlf = false
	#  don't page if output will fit on one screen (for things like git config -l)
	pager = less -F -X
	# global ignore
	excludesfile = ~/.gitignore_global
[user]
	name = Oliver Mannion
	email = 125105+tekumara@users.noreply.github.com
[diff "jupyternotebook"]
	command = git-nbdiffdriver diff
[merge "jupyternotebook"]
	driver = git-nbmergedriver merge %O %A %B %L %P
	name = jupyter notebook merge driver
[difftool "nbdime"]
	cmd = git-nbdifftool diff \"$LOCAL\" \"$REMOTE\" \"$BASE\"
[difftool]
	prompt = false
[mergetool "nbdime"]
	cmd = git-nbmergetool merge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
[mergetool]
	prompt = false
[filter "lfs"]
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f